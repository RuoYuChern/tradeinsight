package com.tao.trade.infra.db.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class CnMarketDailyExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public CnMarketDailyExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andListingIsNull() {
            addCriterion("listing is null");
            return (Criteria) this;
        }

        public Criteria andListingIsNotNull() {
            addCriterion("listing is not null");
            return (Criteria) this;
        }

        public Criteria andListingEqualTo(Integer value) {
            addCriterion("listing =", value, "listing");
            return (Criteria) this;
        }

        public Criteria andListingNotEqualTo(Integer value) {
            addCriterion("listing <>", value, "listing");
            return (Criteria) this;
        }

        public Criteria andListingGreaterThan(Integer value) {
            addCriterion("listing >", value, "listing");
            return (Criteria) this;
        }

        public Criteria andListingGreaterThanOrEqualTo(Integer value) {
            addCriterion("listing >=", value, "listing");
            return (Criteria) this;
        }

        public Criteria andListingLessThan(Integer value) {
            addCriterion("listing <", value, "listing");
            return (Criteria) this;
        }

        public Criteria andListingLessThanOrEqualTo(Integer value) {
            addCriterion("listing <=", value, "listing");
            return (Criteria) this;
        }

        public Criteria andListingIn(List<Integer> values) {
            addCriterion("listing in", values, "listing");
            return (Criteria) this;
        }

        public Criteria andListingNotIn(List<Integer> values) {
            addCriterion("listing not in", values, "listing");
            return (Criteria) this;
        }

        public Criteria andListingBetween(Integer value1, Integer value2) {
            addCriterion("listing between", value1, value2, "listing");
            return (Criteria) this;
        }

        public Criteria andListingNotBetween(Integer value1, Integer value2) {
            addCriterion("listing not between", value1, value2, "listing");
            return (Criteria) this;
        }

        public Criteria andDelistingIsNull() {
            addCriterion("delisting is null");
            return (Criteria) this;
        }

        public Criteria andDelistingIsNotNull() {
            addCriterion("delisting is not null");
            return (Criteria) this;
        }

        public Criteria andDelistingEqualTo(Integer value) {
            addCriterion("delisting =", value, "delisting");
            return (Criteria) this;
        }

        public Criteria andDelistingNotEqualTo(Integer value) {
            addCriterion("delisting <>", value, "delisting");
            return (Criteria) this;
        }

        public Criteria andDelistingGreaterThan(Integer value) {
            addCriterion("delisting >", value, "delisting");
            return (Criteria) this;
        }

        public Criteria andDelistingGreaterThanOrEqualTo(Integer value) {
            addCriterion("delisting >=", value, "delisting");
            return (Criteria) this;
        }

        public Criteria andDelistingLessThan(Integer value) {
            addCriterion("delisting <", value, "delisting");
            return (Criteria) this;
        }

        public Criteria andDelistingLessThanOrEqualTo(Integer value) {
            addCriterion("delisting <=", value, "delisting");
            return (Criteria) this;
        }

        public Criteria andDelistingIn(List<Integer> values) {
            addCriterion("delisting in", values, "delisting");
            return (Criteria) this;
        }

        public Criteria andDelistingNotIn(List<Integer> values) {
            addCriterion("delisting not in", values, "delisting");
            return (Criteria) this;
        }

        public Criteria andDelistingBetween(Integer value1, Integer value2) {
            addCriterion("delisting between", value1, value2, "delisting");
            return (Criteria) this;
        }

        public Criteria andDelistingNotBetween(Integer value1, Integer value2) {
            addCriterion("delisting not between", value1, value2, "delisting");
            return (Criteria) this;
        }

        public Criteria andUpIsNull() {
            addCriterion("up is null");
            return (Criteria) this;
        }

        public Criteria andUpIsNotNull() {
            addCriterion("up is not null");
            return (Criteria) this;
        }

        public Criteria andUpEqualTo(Integer value) {
            addCriterion("up =", value, "up");
            return (Criteria) this;
        }

        public Criteria andUpNotEqualTo(Integer value) {
            addCriterion("up <>", value, "up");
            return (Criteria) this;
        }

        public Criteria andUpGreaterThan(Integer value) {
            addCriterion("up >", value, "up");
            return (Criteria) this;
        }

        public Criteria andUpGreaterThanOrEqualTo(Integer value) {
            addCriterion("up >=", value, "up");
            return (Criteria) this;
        }

        public Criteria andUpLessThan(Integer value) {
            addCriterion("up <", value, "up");
            return (Criteria) this;
        }

        public Criteria andUpLessThanOrEqualTo(Integer value) {
            addCriterion("up <=", value, "up");
            return (Criteria) this;
        }

        public Criteria andUpIn(List<Integer> values) {
            addCriterion("up in", values, "up");
            return (Criteria) this;
        }

        public Criteria andUpNotIn(List<Integer> values) {
            addCriterion("up not in", values, "up");
            return (Criteria) this;
        }

        public Criteria andUpBetween(Integer value1, Integer value2) {
            addCriterion("up between", value1, value2, "up");
            return (Criteria) this;
        }

        public Criteria andUpNotBetween(Integer value1, Integer value2) {
            addCriterion("up not between", value1, value2, "up");
            return (Criteria) this;
        }

        public Criteria andDownIsNull() {
            addCriterion("down is null");
            return (Criteria) this;
        }

        public Criteria andDownIsNotNull() {
            addCriterion("down is not null");
            return (Criteria) this;
        }

        public Criteria andDownEqualTo(Integer value) {
            addCriterion("down =", value, "down");
            return (Criteria) this;
        }

        public Criteria andDownNotEqualTo(Integer value) {
            addCriterion("down <>", value, "down");
            return (Criteria) this;
        }

        public Criteria andDownGreaterThan(Integer value) {
            addCriterion("down >", value, "down");
            return (Criteria) this;
        }

        public Criteria andDownGreaterThanOrEqualTo(Integer value) {
            addCriterion("down >=", value, "down");
            return (Criteria) this;
        }

        public Criteria andDownLessThan(Integer value) {
            addCriterion("down <", value, "down");
            return (Criteria) this;
        }

        public Criteria andDownLessThanOrEqualTo(Integer value) {
            addCriterion("down <=", value, "down");
            return (Criteria) this;
        }

        public Criteria andDownIn(List<Integer> values) {
            addCriterion("down in", values, "down");
            return (Criteria) this;
        }

        public Criteria andDownNotIn(List<Integer> values) {
            addCriterion("down not in", values, "down");
            return (Criteria) this;
        }

        public Criteria andDownBetween(Integer value1, Integer value2) {
            addCriterion("down between", value1, value2, "down");
            return (Criteria) this;
        }

        public Criteria andDownNotBetween(Integer value1, Integer value2) {
            addCriterion("down not between", value1, value2, "down");
            return (Criteria) this;
        }

        public Criteria andVolIsNull() {
            addCriterion("vol is null");
            return (Criteria) this;
        }

        public Criteria andVolIsNotNull() {
            addCriterion("vol is not null");
            return (Criteria) this;
        }

        public Criteria andVolEqualTo(BigDecimal value) {
            addCriterion("vol =", value, "vol");
            return (Criteria) this;
        }

        public Criteria andVolNotEqualTo(BigDecimal value) {
            addCriterion("vol <>", value, "vol");
            return (Criteria) this;
        }

        public Criteria andVolGreaterThan(BigDecimal value) {
            addCriterion("vol >", value, "vol");
            return (Criteria) this;
        }

        public Criteria andVolGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("vol >=", value, "vol");
            return (Criteria) this;
        }

        public Criteria andVolLessThan(BigDecimal value) {
            addCriterion("vol <", value, "vol");
            return (Criteria) this;
        }

        public Criteria andVolLessThanOrEqualTo(BigDecimal value) {
            addCriterion("vol <=", value, "vol");
            return (Criteria) this;
        }

        public Criteria andVolIn(List<BigDecimal> values) {
            addCriterion("vol in", values, "vol");
            return (Criteria) this;
        }

        public Criteria andVolNotIn(List<BigDecimal> values) {
            addCriterion("vol not in", values, "vol");
            return (Criteria) this;
        }

        public Criteria andVolBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("vol between", value1, value2, "vol");
            return (Criteria) this;
        }

        public Criteria andVolNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("vol not between", value1, value2, "vol");
            return (Criteria) this;
        }

        public Criteria andAmountIsNull() {
            addCriterion("amount is null");
            return (Criteria) this;
        }

        public Criteria andAmountIsNotNull() {
            addCriterion("amount is not null");
            return (Criteria) this;
        }

        public Criteria andAmountEqualTo(BigDecimal value) {
            addCriterion("amount =", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountNotEqualTo(BigDecimal value) {
            addCriterion("amount <>", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountGreaterThan(BigDecimal value) {
            addCriterion("amount >", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("amount >=", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountLessThan(BigDecimal value) {
            addCriterion("amount <", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountLessThanOrEqualTo(BigDecimal value) {
            addCriterion("amount <=", value, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountIn(List<BigDecimal> values) {
            addCriterion("amount in", values, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountNotIn(List<BigDecimal> values) {
            addCriterion("amount not in", values, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("amount between", value1, value2, "amount");
            return (Criteria) this;
        }

        public Criteria andAmountNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("amount not between", value1, value2, "amount");
            return (Criteria) this;
        }

        public Criteria andProfitIsNull() {
            addCriterion("profit is null");
            return (Criteria) this;
        }

        public Criteria andProfitIsNotNull() {
            addCriterion("profit is not null");
            return (Criteria) this;
        }

        public Criteria andProfitEqualTo(BigDecimal value) {
            addCriterion("profit =", value, "profit");
            return (Criteria) this;
        }

        public Criteria andProfitNotEqualTo(BigDecimal value) {
            addCriterion("profit <>", value, "profit");
            return (Criteria) this;
        }

        public Criteria andProfitGreaterThan(BigDecimal value) {
            addCriterion("profit >", value, "profit");
            return (Criteria) this;
        }

        public Criteria andProfitGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("profit >=", value, "profit");
            return (Criteria) this;
        }

        public Criteria andProfitLessThan(BigDecimal value) {
            addCriterion("profit <", value, "profit");
            return (Criteria) this;
        }

        public Criteria andProfitLessThanOrEqualTo(BigDecimal value) {
            addCriterion("profit <=", value, "profit");
            return (Criteria) this;
        }

        public Criteria andProfitIn(List<BigDecimal> values) {
            addCriterion("profit in", values, "profit");
            return (Criteria) this;
        }

        public Criteria andProfitNotIn(List<BigDecimal> values) {
            addCriterion("profit not in", values, "profit");
            return (Criteria) this;
        }

        public Criteria andProfitBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("profit between", value1, value2, "profit");
            return (Criteria) this;
        }

        public Criteria andProfitNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("profit not between", value1, value2, "profit");
            return (Criteria) this;
        }

        public Criteria andShiborIsNull() {
            addCriterion("shibor is null");
            return (Criteria) this;
        }

        public Criteria andShiborIsNotNull() {
            addCriterion("shibor is not null");
            return (Criteria) this;
        }

        public Criteria andShiborEqualTo(BigDecimal value) {
            addCriterion("shibor =", value, "shibor");
            return (Criteria) this;
        }

        public Criteria andShiborNotEqualTo(BigDecimal value) {
            addCriterion("shibor <>", value, "shibor");
            return (Criteria) this;
        }

        public Criteria andShiborGreaterThan(BigDecimal value) {
            addCriterion("shibor >", value, "shibor");
            return (Criteria) this;
        }

        public Criteria andShiborGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("shibor >=", value, "shibor");
            return (Criteria) this;
        }

        public Criteria andShiborLessThan(BigDecimal value) {
            addCriterion("shibor <", value, "shibor");
            return (Criteria) this;
        }

        public Criteria andShiborLessThanOrEqualTo(BigDecimal value) {
            addCriterion("shibor <=", value, "shibor");
            return (Criteria) this;
        }

        public Criteria andShiborIn(List<BigDecimal> values) {
            addCriterion("shibor in", values, "shibor");
            return (Criteria) this;
        }

        public Criteria andShiborNotIn(List<BigDecimal> values) {
            addCriterion("shibor not in", values, "shibor");
            return (Criteria) this;
        }

        public Criteria andShiborBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("shibor between", value1, value2, "shibor");
            return (Criteria) this;
        }

        public Criteria andShiborNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("shibor not between", value1, value2, "shibor");
            return (Criteria) this;
        }

        public Criteria andLiborIsNull() {
            addCriterion("libor is null");
            return (Criteria) this;
        }

        public Criteria andLiborIsNotNull() {
            addCriterion("libor is not null");
            return (Criteria) this;
        }

        public Criteria andLiborEqualTo(BigDecimal value) {
            addCriterion("libor =", value, "libor");
            return (Criteria) this;
        }

        public Criteria andLiborNotEqualTo(BigDecimal value) {
            addCriterion("libor <>", value, "libor");
            return (Criteria) this;
        }

        public Criteria andLiborGreaterThan(BigDecimal value) {
            addCriterion("libor >", value, "libor");
            return (Criteria) this;
        }

        public Criteria andLiborGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("libor >=", value, "libor");
            return (Criteria) this;
        }

        public Criteria andLiborLessThan(BigDecimal value) {
            addCriterion("libor <", value, "libor");
            return (Criteria) this;
        }

        public Criteria andLiborLessThanOrEqualTo(BigDecimal value) {
            addCriterion("libor <=", value, "libor");
            return (Criteria) this;
        }

        public Criteria andLiborIn(List<BigDecimal> values) {
            addCriterion("libor in", values, "libor");
            return (Criteria) this;
        }

        public Criteria andLiborNotIn(List<BigDecimal> values) {
            addCriterion("libor not in", values, "libor");
            return (Criteria) this;
        }

        public Criteria andLiborBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("libor between", value1, value2, "libor");
            return (Criteria) this;
        }

        public Criteria andLiborNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("libor not between", value1, value2, "libor");
            return (Criteria) this;
        }

        public Criteria andHiborIsNull() {
            addCriterion("hibor is null");
            return (Criteria) this;
        }

        public Criteria andHiborIsNotNull() {
            addCriterion("hibor is not null");
            return (Criteria) this;
        }

        public Criteria andHiborEqualTo(BigDecimal value) {
            addCriterion("hibor =", value, "hibor");
            return (Criteria) this;
        }

        public Criteria andHiborNotEqualTo(BigDecimal value) {
            addCriterion("hibor <>", value, "hibor");
            return (Criteria) this;
        }

        public Criteria andHiborGreaterThan(BigDecimal value) {
            addCriterion("hibor >", value, "hibor");
            return (Criteria) this;
        }

        public Criteria andHiborGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("hibor >=", value, "hibor");
            return (Criteria) this;
        }

        public Criteria andHiborLessThan(BigDecimal value) {
            addCriterion("hibor <", value, "hibor");
            return (Criteria) this;
        }

        public Criteria andHiborLessThanOrEqualTo(BigDecimal value) {
            addCriterion("hibor <=", value, "hibor");
            return (Criteria) this;
        }

        public Criteria andHiborIn(List<BigDecimal> values) {
            addCriterion("hibor in", values, "hibor");
            return (Criteria) this;
        }

        public Criteria andHiborNotIn(List<BigDecimal> values) {
            addCriterion("hibor not in", values, "hibor");
            return (Criteria) this;
        }

        public Criteria andHiborBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("hibor between", value1, value2, "hibor");
            return (Criteria) this;
        }

        public Criteria andHiborNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("hibor not between", value1, value2, "hibor");
            return (Criteria) this;
        }

        public Criteria andTradeDateIsNull() {
            addCriterion("trade_date is null");
            return (Criteria) this;
        }

        public Criteria andTradeDateIsNotNull() {
            addCriterion("trade_date is not null");
            return (Criteria) this;
        }

        public Criteria andTradeDateEqualTo(Date value) {
            addCriterionForJDBCDate("trade_date =", value, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andTradeDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("trade_date <>", value, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andTradeDateGreaterThan(Date value) {
            addCriterionForJDBCDate("trade_date >", value, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andTradeDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("trade_date >=", value, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andTradeDateLessThan(Date value) {
            addCriterionForJDBCDate("trade_date <", value, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andTradeDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("trade_date <=", value, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andTradeDateIn(List<Date> values) {
            addCriterionForJDBCDate("trade_date in", values, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andTradeDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("trade_date not in", values, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andTradeDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("trade_date between", value1, value2, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andTradeDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("trade_date not between", value1, value2, "tradeDate");
            return (Criteria) this;
        }

        public Criteria andUplimitIsNull() {
            addCriterion("uplimit is null");
            return (Criteria) this;
        }

        public Criteria andUplimitIsNotNull() {
            addCriterion("uplimit is not null");
            return (Criteria) this;
        }

        public Criteria andUplimitEqualTo(Integer value) {
            addCriterion("uplimit =", value, "uplimit");
            return (Criteria) this;
        }

        public Criteria andUplimitNotEqualTo(Integer value) {
            addCriterion("uplimit <>", value, "uplimit");
            return (Criteria) this;
        }

        public Criteria andUplimitGreaterThan(Integer value) {
            addCriterion("uplimit >", value, "uplimit");
            return (Criteria) this;
        }

        public Criteria andUplimitGreaterThanOrEqualTo(Integer value) {
            addCriterion("uplimit >=", value, "uplimit");
            return (Criteria) this;
        }

        public Criteria andUplimitLessThan(Integer value) {
            addCriterion("uplimit <", value, "uplimit");
            return (Criteria) this;
        }

        public Criteria andUplimitLessThanOrEqualTo(Integer value) {
            addCriterion("uplimit <=", value, "uplimit");
            return (Criteria) this;
        }

        public Criteria andUplimitIn(List<Integer> values) {
            addCriterion("uplimit in", values, "uplimit");
            return (Criteria) this;
        }

        public Criteria andUplimitNotIn(List<Integer> values) {
            addCriterion("uplimit not in", values, "uplimit");
            return (Criteria) this;
        }

        public Criteria andUplimitBetween(Integer value1, Integer value2) {
            addCriterion("uplimit between", value1, value2, "uplimit");
            return (Criteria) this;
        }

        public Criteria andUplimitNotBetween(Integer value1, Integer value2) {
            addCriterion("uplimit not between", value1, value2, "uplimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitIsNull() {
            addCriterion("downlimit is null");
            return (Criteria) this;
        }

        public Criteria andDownlimitIsNotNull() {
            addCriterion("downlimit is not null");
            return (Criteria) this;
        }

        public Criteria andDownlimitEqualTo(Integer value) {
            addCriterion("downlimit =", value, "downlimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitNotEqualTo(Integer value) {
            addCriterion("downlimit <>", value, "downlimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitGreaterThan(Integer value) {
            addCriterion("downlimit >", value, "downlimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitGreaterThanOrEqualTo(Integer value) {
            addCriterion("downlimit >=", value, "downlimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitLessThan(Integer value) {
            addCriterion("downlimit <", value, "downlimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitLessThanOrEqualTo(Integer value) {
            addCriterion("downlimit <=", value, "downlimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitIn(List<Integer> values) {
            addCriterion("downlimit in", values, "downlimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitNotIn(List<Integer> values) {
            addCriterion("downlimit not in", values, "downlimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitBetween(Integer value1, Integer value2) {
            addCriterion("downlimit between", value1, value2, "downlimit");
            return (Criteria) this;
        }

        public Criteria andDownlimitNotBetween(Integer value1, Integer value2) {
            addCriterion("downlimit not between", value1, value2, "downlimit");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated do_not_delete_during_merge Sat Mar 04 20:51:53 CST 2023
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table public.cn_market_daily
     *
     * @mbg.generated Sat Mar 04 20:51:53 CST 2023
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}